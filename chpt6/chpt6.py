# python没有类型声明,所有的类型都是动态类型,根据对象的类型而确定
# 3时对象,a是对象3的一个引用, a可以修改为指向其他类型的对象
# 对象是python分配的内存空间
# 对象有两个标准的头部信息: 1. 类型标志符号用以标记对象的类型 2.引用的计数器
# 类型数据对象,而不是变量
a = 3
print(type(a)) 
a = 'haha'
print(type(a))

#垃圾回收, 某个对象的引用计数一旦为0之后,自动回收该对象
b = 4
b = 'cde' # 此时对象"4"已经被回收
#共享引用
c = b
print(c) #此时c,b共同指向了同一个对象
b = 'xyz'#此时b指向了新的对象, 而此时c仍然指向对象'cde'
print('b: ', b, 'c: ', c)
#如果支持修改原对象的类型,要尤其注意对共享引用的影响
e = [1, 2, 3]
f = e
e[0] = 5
print(f) #此时因为e[0]的修改,导致f指向的对象随之发生改变
# 但是如果f是一个复制,那么修改e则不会影响f
f = e[:]
e[0] = 10
print(f)

#共享引用和相等
x = 42
x = 'shrubbery' #此处的42可能不会立即被回收.python为了复用,会缓存42,以便下一个42用到, 大多数的对象都会被立即回收

#等号"==" 操作符用于测试两个对象是否值相等, "is" 操作符用于检查两个对象是否时一个对象
z1 = [1,2]
z2 = [1,2]
print('z1 == z2: ', z1 == z2, ' z1 is z2: ', z1 is z2)
#但是因为小数字被缓存了,所以两个不同的对象,使用is时,仍然可能相等
z3 = 10
z4 = 10
print('z3 == z4', z3 == z4, ' z3 is z4: ', z3 is z4)